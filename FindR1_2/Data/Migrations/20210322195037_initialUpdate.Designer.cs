// <auto-generated />
using System;
using FindR1_2.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FindR1_2.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210322195037_initialUpdate")]
    partial class initialUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FindR1_2.Models.Address", b =>
                {
                    b.Property<int>("Address_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AddressId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Zone")
                        .HasColumnType("int");

                    b.HasKey("Address_Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Address_Id = 1,
                            City = "Alba-Iulia",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 2,
                            City = "Alba-Iulia",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 3,
                            City = "Alexandria",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 4,
                            City = "Alexandria",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 5,
                            City = "Arad",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 6,
                            City = "Arad",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 7,
                            City = "Bacau",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 8,
                            City = "Bacau",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 9,
                            City = "Baia Mare",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 10,
                            City = "Baia Mare",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 11,
                            City = "Bistrita",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 12,
                            City = "Bistrita",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 13,
                            City = "Botosani",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 14,
                            City = "Botosani",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 15,
                            City = "Brasov",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 16,
                            City = "Brasov",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 17,
                            City = "Braila",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 18,
                            City = "Braila",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 19,
                            City = "Buzau",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 20,
                            City = "Buzau",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 21,
                            City = "Calarasi",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 22,
                            City = "Calarasi",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 23,
                            City = "Cluj-Napoca",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 24,
                            City = "Cluj-Napoca",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 25,
                            City = "Constanta",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 26,
                            City = "Constanta",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 27,
                            City = "Craiova",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 28,
                            City = "Craiova",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 29,
                            City = "Deva",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 30,
                            City = "Deva",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 31,
                            City = "Drobeta-Turnu-Severin",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 32,
                            City = "Drobeta-Turnu-Severin",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 33,
                            City = "Focsani",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 34,
                            City = "Focsani",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 35,
                            City = "Galati",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 36,
                            City = "Galati",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 37,
                            City = "Giurgiu",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 38,
                            City = "Giurgiu",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 39,
                            City = "Iasi",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 40,
                            City = "Iasi",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 41,
                            City = "Miercurea-Ciuc",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 42,
                            City = "Miercurea-Ciuc",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 43,
                            City = "Oradea",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 44,
                            City = "Oradea",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 45,
                            City = "Piatra Neamt",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 46,
                            City = "Piatra Neamt",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 47,
                            City = "Pitesti",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 48,
                            City = "Pitesti",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 49,
                            City = "Ploiesti",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 50,
                            City = "Ploiesti",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 51,
                            City = "Ramnicu Valcea",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 52,
                            City = "Ramnicu Valcea",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 53,
                            City = "Resita",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 54,
                            City = "Resita",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 55,
                            City = "Satu Mare",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 56,
                            City = "Satu Mare",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 57,
                            City = "Sfantu Gheorghe",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 58,
                            City = "Sfantu Gheorghe",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 59,
                            City = "Sibiu",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 60,
                            City = "Sibiu",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 61,
                            City = "Slatina",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 62,
                            City = "Slatina",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 63,
                            City = "Slobozia",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 64,
                            City = "Slobozia",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 65,
                            City = "Suceava",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 66,
                            City = "Suceava",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 67,
                            City = "Targoviste",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 68,
                            City = "Targoviste",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 69,
                            City = "Targu Jiu",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 70,
                            City = "Targu Jiu",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 71,
                            City = "Targu Mures",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 72,
                            City = "Targu Mures",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 73,
                            City = "Timisoara",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 74,
                            City = "Timisoara",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 75,
                            City = "Tulcea",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 76,
                            City = "Tulcea",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 77,
                            City = "Vaslui",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 78,
                            City = "Vaslui",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 79,
                            City = "Zalau",
                            Country = "Romania",
                            Zone = 1
                        },
                        new
                        {
                            Address_Id = 80,
                            City = "Zalau",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 81,
                            City = "Bucuresti, Sector1",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 82,
                            City = "Bucuresti, Sector2",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 83,
                            City = "Bucuresti, Sector3",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 84,
                            City = "Bucuresti, Sector4",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 85,
                            City = "Bucuresti, Sector5",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 86,
                            City = "Bucuresti, Sector6",
                            Country = "Romania",
                            Zone = 0
                        },
                        new
                        {
                            Address_Id = 87,
                            City = "Bucuresti",
                            Country = "Romania",
                            Zone = 1
                        });
                });

            modelBuilder.Entity("FindR1_2.Models.Advertisement", b =>
                {
                    b.Property<int>("Advertisement_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AdvertisementId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CheckInDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProfileId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Advertisement_Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("Advertisements");

                    b.HasData(
                        new
                        {
                            Advertisement_Id = 1,
                            CheckInDate = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileId = "a24d8022-adae-459b-b788-7242fac46783"
                        },
                        new
                        {
                            Advertisement_Id = 2,
                            CheckInDate = new DateTime(2021, 9, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileId = "49fb19d5-8e79-4b07-8def-97a18831165f"
                        },
                        new
                        {
                            Advertisement_Id = 3,
                            CheckInDate = new DateTime(2021, 10, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ProfileId = "dc54bba7-75b4-4065-b96d-cbaa565e88bc"
                        });
                });

            modelBuilder.Entity("FindR1_2.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<int>("AttendsTo")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePicture")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "a24d8022-adae-459b-b788-7242fac46783",
                            AccessFailedCount = 0,
                            AddressId = 1,
                            Age = 20,
                            AttendsTo = 7,
                            BirthDate = new DateTime(2000, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2dfb6633-4fa1-4c70-b591-35c14eb97c9e",
                            Details = "Hi, I am Bot1!",
                            Email = "Testbot1@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test1",
                            Gender = 0,
                            LastName = "Bot1",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT1@YAHOO.COM",
                            NormalizedUserName = "TESTBOT1@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEOTzVhwRddkitd3UyFDJH+fIaU7BfrtgbM18HXbfN+tjUVOhSACNBMouuzG0Fi0GxQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f4507a46-5202-442e-9328-fd08699e654f",
                            TwoFactorEnabled = false,
                            UserName = "Testbot1@yahoo.com"
                        },
                        new
                        {
                            Id = "4e2e4d95-0c75-4e94-8bb9-c5d689e137d7",
                            AccessFailedCount = 0,
                            AddressId = 6,
                            Age = 19,
                            AttendsTo = 7,
                            BirthDate = new DateTime(2001, 8, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a1e2bde0-4c46-4b40-a3ea-d9a509897fa2",
                            Details = "Hi, I am Bot2!",
                            Email = "Testbot2@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test2",
                            Gender = 0,
                            LastName = "Bot2",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT2@YAHOO.COM",
                            NormalizedUserName = "TESTBOT2@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPLemjmkS3yejmtRnMxHkB27hndAeZcuToWOgLJDacV6PYb9+V6M4mPd1nEpwWNNrw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0a75f115-25de-49c1-8234-e8ecb26ace0d",
                            TwoFactorEnabled = false,
                            UserName = "Testbot2@yahoo.com"
                        },
                        new
                        {
                            Id = "3b164904-fc73-459a-bb48-43e85dc163c1",
                            AccessFailedCount = 0,
                            AddressId = 10,
                            Age = 22,
                            AttendsTo = 23,
                            BirthDate = new DateTime(1999, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "c3774bf0-c907-4a5d-9adb-5feaeccad478",
                            Details = "Hi, I am Bot3!",
                            Email = "Testbot3@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test3",
                            Gender = 1,
                            LastName = "Bot3",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT3@YAHOO.COM",
                            NormalizedUserName = "TESTBOT3@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPOi602s5nt9g4kw3VT9W0OlCybl1dxY5V3M5tpoo7h03MZIb9ASLYpXybq0MYVfPg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ef715ee4-fba2-43aa-ac01-360cb8ad51fa",
                            TwoFactorEnabled = false,
                            UserName = "Testbot3@yahoo.com"
                        },
                        new
                        {
                            Id = "dc54bba7-75b4-4065-b96d-cbaa565e88bc",
                            AccessFailedCount = 0,
                            AddressId = 35,
                            Age = 21,
                            AttendsTo = 24,
                            BirthDate = new DateTime(2000, 1, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "79aab502-8e7e-4d17-a587-e238c9e15ac4",
                            Details = "Hi, I am Bot4!",
                            Email = "Testbot4@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test4",
                            Gender = 0,
                            LastName = "Bot4",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT4@YAHOO.COM",
                            NormalizedUserName = "TESTBOT4@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEADJRuGlqh/o5zpMKqP7kQfsvfrVkoC6VMEj1sx0l4wdSOfqVAk5nCVFCQjPlQ8jlw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b94c428e-01b1-48ff-af9c-674ff2cfc0f1",
                            TwoFactorEnabled = false,
                            UserName = "Testbot4@yahoo.com"
                        },
                        new
                        {
                            Id = "49fb19d5-8e79-4b07-8def-97a18831165f",
                            AccessFailedCount = 0,
                            AddressId = 39,
                            Age = 23,
                            AttendsTo = 23,
                            BirthDate = new DateTime(1998, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "16f684ff-f4b8-4443-bde5-a800579580d7",
                            Details = "Hi, I am Bot5!",
                            Email = "Testbot5@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test5",
                            Gender = 1,
                            LastName = "Bot5",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT5@YAHOO.COM",
                            NormalizedUserName = "TESTBOT5@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEM/qr+KTwGdJZWh+NwyB3//VC1fXdHEWfqUxg/DeKM9hEFXxawbSZhHJWJHl8DDXfg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "3b9653d0-e2dc-4384-820c-6e25a0fba376",
                            TwoFactorEnabled = false,
                            UserName = "Testbot5@yahoo.com"
                        },
                        new
                        {
                            Id = "405d96a0-e830-4d45-9845-5d6fdb81b8c9",
                            AccessFailedCount = 0,
                            AddressId = 48,
                            Age = 18,
                            AttendsTo = 0,
                            BirthDate = new DateTime(2002, 5, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "a702bb04-9867-405a-a6de-6e5e2c315e59",
                            Details = "Hi, I am Bot6!",
                            Email = "Testbot6@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test6",
                            Gender = 0,
                            LastName = "Bot6",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT6@YAHOO.COM",
                            NormalizedUserName = "TESTBOT6@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAENWld65QLpepsRggtYm7iq45cPmGaPSp2pIYePmoj46L57nS3ibI5mmKDjkKLonlJg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "42fceaaf-7b2c-45a1-b7b2-d5e0aa1fe7df",
                            TwoFactorEnabled = false,
                            UserName = "Testbot6@yahoo.com"
                        },
                        new
                        {
                            Id = "f36ff8e7-7441-42cb-bdec-f3608eaa4af5",
                            AccessFailedCount = 0,
                            AddressId = 52,
                            Age = 22,
                            AttendsTo = 0,
                            BirthDate = new DateTime(1999, 12, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "90cab393-4dca-499d-abf4-8174434e7ff8",
                            Details = "Hi, I am Bot7!",
                            Email = "Testbot7@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test7",
                            Gender = 1,
                            LastName = "Bot7",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT7@YAHOO.COM",
                            NormalizedUserName = "TESTBOT7@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBJoeM0WOIZCtt5+BSKFKjcTixs8Mn+WsCQu/raiisCLH2r++fYMIyg9felXYuCMig==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b1666508-e7a8-46e4-bbe4-78674b1346e8",
                            TwoFactorEnabled = false,
                            UserName = "Testbot7@yahoo.com"
                        },
                        new
                        {
                            Id = "72391fa7-4466-478b-957d-e5892654c8b0",
                            AccessFailedCount = 0,
                            AddressId = 68,
                            Age = 20,
                            AttendsTo = 0,
                            BirthDate = new DateTime(2000, 6, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d6bc0a7d-8888-4dd8-9f2b-b1144f53476e",
                            Details = "Hi, I am Bot8!",
                            Email = "Testbot8@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test8",
                            Gender = 1,
                            LastName = "Bot8",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT8@YAHOO.COM",
                            NormalizedUserName = "TESTBOT8@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKplGmxQfLpwFVcUcqxDBB3PwBYD0eC+DAcEZYTTlnvdM8zhXj1P0QgLjLHZgi9AdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "4ed032c2-1e2b-4db1-b0ee-f4aba5654f68",
                            TwoFactorEnabled = false,
                            UserName = "Testbot8@yahoo.com"
                        },
                        new
                        {
                            Id = "6950bc44-dc3a-46cf-900b-d1379a71d266",
                            AccessFailedCount = 0,
                            AddressId = 81,
                            Age = 22,
                            AttendsTo = 0,
                            BirthDate = new DateTime(1999, 9, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "1a3e7161-8447-442d-9bba-a501d8c0f140",
                            Details = "Hi, I am Bot9!",
                            Email = "Testbot9@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test9",
                            Gender = 0,
                            LastName = "Bot9",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT9@YAHOO.COM",
                            NormalizedUserName = "TESTBOT9@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEKdJqTT6u8snVyAfH+akMQFX5c/oicIzCGTIWAHn0fpq5PYfvMl8wZXg+eHjlFHU7g==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f3ddb4d5-9410-4aa0-9451-f50b0e5dbc17",
                            TwoFactorEnabled = false,
                            UserName = "Testbot9@yahoo.com"
                        },
                        new
                        {
                            Id = "261874ec-9711-4cb0-873b-ba9125615189",
                            AccessFailedCount = 0,
                            AddressId = 84,
                            Age = 20,
                            AttendsTo = 0,
                            BirthDate = new DateTime(2000, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "76fa8a40-60f5-402a-bd49-894784048159",
                            Details = "Hi, I am Bot10!",
                            Email = "Testbot10@yahoo.com",
                            EmailConfirmed = true,
                            FirstName = "Test10",
                            Gender = 1,
                            LastName = "Bot10",
                            LockoutEnabled = false,
                            NormalizedEmail = "TESTBOT10@YAHOO.COM",
                            NormalizedUserName = "TESTBOT10@YAHOO.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEPYi4FNi07wlgw/X1H21KqVcail8YksCtOhAIImncRpPGtNoF0zY76krHEKs83R3VQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "1ab0e074-d129-4abd-8fa0-d64af1aa5f81",
                            TwoFactorEnabled = false,
                            UserName = "Testbot10@yahoo.com"
                        });
                });

            modelBuilder.Entity("FindR1_2.Models.CompleteAddress", b =>
                {
                    b.Property<int>("CompleteAddress_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CompleteAddressId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("Floor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HousingId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompleteAddress_Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("HousingId")
                        .IsUnique();

                    b.ToTable("CompleteAddresses");

                    b.HasData(
                        new
                        {
                            CompleteAddress_Id = 1,
                            AddressId = 1,
                            Floor = "2",
                            HousingId = 1,
                            Latitude = "46.066828",
                            Longitude = "23.554441",
                            Street = "Strada Gladiolelor 8"
                        },
                        new
                        {
                            CompleteAddress_Id = 2,
                            AddressId = 2,
                            Floor = "Parter",
                            HousingId = 2,
                            Latitude = "46.175409",
                            Longitude = "21.310149",
                            Street = "Strada Octaviang Goga 34"
                        },
                        new
                        {
                            CompleteAddress_Id = 3,
                            AddressId = 15,
                            Floor = "1",
                            HousingId = 3,
                            Latitude = "45.640371",
                            Longitude = "25.624299",
                            Street = "Strada Zorilor 13"
                        },
                        new
                        {
                            CompleteAddress_Id = 4,
                            AddressId = 15,
                            Floor = "Parter,1",
                            HousingId = 4,
                            Latitude = "45.661322",
                            Longitude = "25.599990",
                            Street = "Strada Vulcan 49"
                        },
                        new
                        {
                            CompleteAddress_Id = 5,
                            AddressId = 15,
                            Floor = "Parter",
                            HousingId = 5,
                            Latitude = "45.655480",
                            Longitude = "25.594241",
                            Street = "Strada Sitei 84"
                        },
                        new
                        {
                            CompleteAddress_Id = 6,
                            AddressId = 23,
                            Floor = "4",
                            HousingId = 6,
                            Latitude = "46.756804",
                            Longitude = "23.559443",
                            Street = "Strada Ion Mester 3"
                        },
                        new
                        {
                            CompleteAddress_Id = 7,
                            AddressId = 23,
                            Floor = "Parter",
                            HousingId = 7,
                            Latitude = "46.766510",
                            Longitude = "23.609383",
                            Street = "Strada Vasile Lupu 24"
                        },
                        new
                        {
                            CompleteAddress_Id = 8,
                            AddressId = 23,
                            Floor = "1",
                            HousingId = 8,
                            Latitude = "46.763605",
                            Longitude = "23.596262",
                            Street = "Strada Aviator Badescu 34"
                        },
                        new
                        {
                            CompleteAddress_Id = 9,
                            AddressId = 24,
                            Floor = "3",
                            HousingId = 9,
                            Latitude = "46.794320",
                            Longitude = "23.524650",
                            Street = "Strada Magnoliei 70"
                        },
                        new
                        {
                            CompleteAddress_Id = 10,
                            AddressId = 25,
                            Floor = "2",
                            HousingId = 10,
                            Latitude = "44.201169",
                            Longitude = "28.647306",
                            Street = "Strada Ioan Borcea 35"
                        },
                        new
                        {
                            CompleteAddress_Id = 11,
                            AddressId = 25,
                            Floor = "Parter",
                            HousingId = 11,
                            Latitude = "44.187265",
                            Longitude = "28.627114",
                            Street = "Strada Dorului 57"
                        },
                        new
                        {
                            CompleteAddress_Id = 12,
                            AddressId = 25,
                            Floor = "Parter",
                            HousingId = 12,
                            Latitude = "44.197265",
                            Longitude = "28.627114",
                            Street = "Strada Dorului 53"
                        },
                        new
                        {
                            CompleteAddress_Id = 13,
                            AddressId = 56,
                            Floor = "3",
                            HousingId = 13,
                            Latitude = "47.785716",
                            Longitude = "22.860054",
                            Street = "Bulevardul Muncii 36"
                        },
                        new
                        {
                            CompleteAddress_Id = 14,
                            AddressId = 60,
                            Floor = "4",
                            HousingId = 14,
                            Latitude = "45.785642",
                            Longitude = "24.134520",
                            Street = "Strada Hategului 5"
                        },
                        new
                        {
                            CompleteAddress_Id = 15,
                            AddressId = 73,
                            Floor = "1",
                            HousingId = 15,
                            Latitude = "45.775033",
                            Longitude = "21.228275",
                            Street = "Strada Ion Miron 34"
                        },
                        new
                        {
                            CompleteAddress_Id = 16,
                            AddressId = 73,
                            Floor = "5",
                            HousingId = 16,
                            Latitude = "45.755140",
                            Longitude = "21.223142",
                            Street = "Strada Paris 2"
                        },
                        new
                        {
                            CompleteAddress_Id = 17,
                            AddressId = 24,
                            Floor = "3",
                            HousingId = 17,
                            Latitude = "46.794320",
                            Longitude = "23.524650",
                            Street = "Strada Magnoliei 70"
                        },
                        new
                        {
                            CompleteAddress_Id = 18,
                            AddressId = 81,
                            Floor = "5",
                            HousingId = 18,
                            Latitude = "46.794320",
                            Longitude = "23.524650",
                            Street = "Bulevardul Dinica Golescu 43"
                        },
                        new
                        {
                            CompleteAddress_Id = 19,
                            AddressId = 82,
                            Floor = "6",
                            HousingId = 19,
                            Latitude = "44.438978",
                            Longitude = "26.173939",
                            Street = "Strada Bodesti 2"
                        },
                        new
                        {
                            CompleteAddress_Id = 20,
                            AddressId = 82,
                            Floor = "9",
                            HousingId = 20,
                            Latitude = "44.452571",
                            Longitude = "26.102739",
                            Street = "Soseaua Stefan cel Mare 11"
                        },
                        new
                        {
                            CompleteAddress_Id = 21,
                            AddressId = 83,
                            Floor = "3",
                            HousingId = 21,
                            Latitude = "44.414781",
                            Longitude = "26.183618",
                            Street = "Strada Gura Ialomitei 3"
                        },
                        new
                        {
                            CompleteAddress_Id = 22,
                            AddressId = 83,
                            Floor = "2",
                            HousingId = 22,
                            Latitude = "44.416427",
                            Longitude = "26.127926",
                            Street = "Strada Zizin 18"
                        },
                        new
                        {
                            CompleteAddress_Id = 23,
                            AddressId = 84,
                            Floor = "Parter",
                            HousingId = 23,
                            Latitude = "44.411703",
                            Longitude = "26.113875",
                            Street = "Calea Vacaresti 232"
                        },
                        new
                        {
                            CompleteAddress_Id = 24,
                            AddressId = 84,
                            Floor = "1",
                            HousingId = 24,
                            Latitude = "44.413708",
                            Longitude = "26.114010",
                            Street = "Calea Vacaresti 184"
                        },
                        new
                        {
                            CompleteAddress_Id = 25,
                            AddressId = 85,
                            Floor = "Parter",
                            HousingId = 25,
                            Latitude = "44.394717",
                            Longitude = "26.043258",
                            Street = "Strada Botosani 26"
                        },
                        new
                        {
                            CompleteAddress_Id = 26,
                            AddressId = 85,
                            Floor = "8",
                            HousingId = 26,
                            Latitude = "44.404615",
                            Longitude = "26.059843",
                            Street = "Strada Topolinita 59"
                        },
                        new
                        {
                            CompleteAddress_Id = 27,
                            AddressId = 86,
                            Floor = "3",
                            HousingId = 27,
                            Latitude = "44.420257",
                            Longitude = "26.004572",
                            Street = "Aleea Pupaza cu Mot 22"
                        },
                        new
                        {
                            CompleteAddress_Id = 28,
                            AddressId = 86,
                            Floor = "3",
                            HousingId = 28,
                            Latitude = "44.435211",
                            Longitude = "26.036348",
                            Street = "Aleea Cetatuia 10"
                        },
                        new
                        {
                            CompleteAddress_Id = 29,
                            AddressId = 87,
                            Floor = "Parter",
                            HousingId = 29,
                            Latitude = "43.377385",
                            Longitude = "26.166757",
                            Street = "Strada Veseliei 29"
                        },
                        new
                        {
                            CompleteAddress_Id = 30,
                            AddressId = 87,
                            Floor = "2",
                            HousingId = 30,
                            Latitude = "44.552820",
                            Longitude = "26.070561",
                            Street = "Strada Floare de Cais 13"
                        });
                });

            modelBuilder.Entity("FindR1_2.Models.Housing", b =>
                {
                    b.Property<int>("Housing_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("HousingId")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdvertisementId")
                        .HasColumnType("int");

                    b.Property<bool>("IsTaken")
                        .HasColumnType("bit");

                    b.Property<int>("NoOfRooms")
                        .HasColumnType("int");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("Housing_Id");

                    b.HasIndex("AdvertisementId")
                        .IsUnique()
                        .HasFilter("[AdvertisementId] IS NOT NULL");

                    b.ToTable("Housings");

                    b.HasData(
                        new
                        {
                            Housing_Id = 1,
                            IsTaken = false,
                            NoOfRooms = 1,
                            Price = 600
                        },
                        new
                        {
                            Housing_Id = 2,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1000
                        },
                        new
                        {
                            Housing_Id = 3,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1200
                        },
                        new
                        {
                            Housing_Id = 4,
                            IsTaken = false,
                            NoOfRooms = 4,
                            Price = 2000
                        },
                        new
                        {
                            Housing_Id = 5,
                            IsTaken = false,
                            NoOfRooms = 1,
                            Price = 600
                        },
                        new
                        {
                            Housing_Id = 6,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1100
                        },
                        new
                        {
                            Housing_Id = 7,
                            AdvertisementId = 1,
                            IsTaken = true,
                            NoOfRooms = 3,
                            Price = 1500
                        },
                        new
                        {
                            Housing_Id = 8,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 900
                        },
                        new
                        {
                            Housing_Id = 9,
                            IsTaken = false,
                            NoOfRooms = 3,
                            Price = 1700
                        },
                        new
                        {
                            Housing_Id = 10,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1000
                        },
                        new
                        {
                            Housing_Id = 11,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 900
                        },
                        new
                        {
                            Housing_Id = 12,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1400
                        },
                        new
                        {
                            Housing_Id = 13,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 700
                        },
                        new
                        {
                            Housing_Id = 14,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 900
                        },
                        new
                        {
                            Housing_Id = 15,
                            IsTaken = false,
                            NoOfRooms = 3,
                            Price = 1250
                        },
                        new
                        {
                            Housing_Id = 16,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1200
                        },
                        new
                        {
                            Housing_Id = 17,
                            IsTaken = false,
                            NoOfRooms = 3,
                            Price = 2500
                        },
                        new
                        {
                            Housing_Id = 18,
                            IsTaken = false,
                            NoOfRooms = 1,
                            Price = 1300
                        },
                        new
                        {
                            Housing_Id = 19,
                            IsTaken = false,
                            NoOfRooms = 3,
                            Price = 1500
                        },
                        new
                        {
                            Housing_Id = 20,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1300
                        },
                        new
                        {
                            Housing_Id = 21,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 800
                        },
                        new
                        {
                            Housing_Id = 22,
                            IsTaken = false,
                            NoOfRooms = 1,
                            Price = 1300
                        },
                        new
                        {
                            Housing_Id = 23,
                            AdvertisementId = 2,
                            IsTaken = true,
                            NoOfRooms = 2,
                            Price = 1600
                        },
                        new
                        {
                            Housing_Id = 24,
                            AdvertisementId = 3,
                            IsTaken = true,
                            NoOfRooms = 2,
                            Price = 1450
                        },
                        new
                        {
                            Housing_Id = 25,
                            IsTaken = false,
                            NoOfRooms = 3,
                            Price = 1800
                        },
                        new
                        {
                            Housing_Id = 26,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1000
                        },
                        new
                        {
                            Housing_Id = 27,
                            IsTaken = false,
                            NoOfRooms = 1,
                            Price = 500
                        },
                        new
                        {
                            Housing_Id = 28,
                            IsTaken = false,
                            NoOfRooms = 2,
                            Price = 1800
                        },
                        new
                        {
                            Housing_Id = 29,
                            IsTaken = false,
                            NoOfRooms = 3,
                            Price = 1700
                        },
                        new
                        {
                            Housing_Id = 30,
                            IsTaken = false,
                            NoOfRooms = 4,
                            Price = 3000
                        });
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes");
                });

            modelBuilder.Entity("IdentityServer4.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FindR1_2.Models.Advertisement", b =>
                {
                    b.HasOne("FindR1_2.Models.ApplicationUser", "Profile")
                        .WithMany("Advertisements")
                        .HasForeignKey("ProfileId");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("FindR1_2.Models.ApplicationUser", b =>
                {
                    b.HasOne("FindR1_2.Models.Address", "Adress")
                        .WithMany("ApplicationUsers")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Adress");
                });

            modelBuilder.Entity("FindR1_2.Models.CompleteAddress", b =>
                {
                    b.HasOne("FindR1_2.Models.Address", "Address")
                        .WithMany("CompleteAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindR1_2.Models.Housing", "Housing")
                        .WithOne("FullAddress")
                        .HasForeignKey("FindR1_2.Models.CompleteAddress", "HousingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Housing");
                });

            modelBuilder.Entity("FindR1_2.Models.Housing", b =>
                {
                    b.HasOne("FindR1_2.Models.Advertisement", "Advertisement")
                        .WithOne("Housing")
                        .HasForeignKey("FindR1_2.Models.Housing", "AdvertisementId");

                    b.Navigation("Advertisement");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FindR1_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FindR1_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FindR1_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FindR1_2.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FindR1_2.Models.Address", b =>
                {
                    b.Navigation("ApplicationUsers");

                    b.Navigation("CompleteAddresses");
                });

            modelBuilder.Entity("FindR1_2.Models.Advertisement", b =>
                {
                    b.Navigation("Housing");
                });

            modelBuilder.Entity("FindR1_2.Models.ApplicationUser", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("FindR1_2.Models.Housing", b =>
                {
                    b.Navigation("FullAddress");
                });
#pragma warning restore 612, 618
        }
    }
}
